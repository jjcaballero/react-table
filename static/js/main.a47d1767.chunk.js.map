{"version":3,"sources":["makeData.js","App.js","index.js"],"names":["range","len","arr","i","push","newPerson","statusChance","Math","random","firstName","namor","generate","words","numbers","lastName","age","floor","visits","progress","status","Styles","styled","div","withConfig","displayName","componentId","EditableCell","_ref","initialValue","value","index","row","id","column","updateMyData","editable","_React$useState","React","useState","_React$useState2","Object","slicedToArray","setValue","useEffect","react_default","a","createElement","onChange","e","target","onBlur","concat","DefaultColumnFilter","_ref2","_ref2$column","filterValue","preFilteredRows","setFilter","count","length","undefined","placeholder","SelectColumnFilter","_ref3","_ref3$column","options","useMemo","Set","forEach","add","values","toConsumableArray","map","option","key","SliderColumnFilter","_ref4","_ref4$column","_React$useMemo","min","max","_React$useMemo2","Fragment","type","parseInt","onClick","NumberRangeColumnFilter","_ref5","_ref5$column","_ref5$column$filterVa","_React$useMemo3","_React$useMemo4","style","display","val","old","arguments","width","marginRight","marginLeft","fuzzyTextFilterFn","rows","matchSorter","keys","Table","_ref6","columns","data","skipReset","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","Cell","_useTable","useTable","autoResetPage","autoResetSelectedRows","disableMultiSort","useFilters","useGroupBy","useSortBy","useExpanded","usePagination","useRowSelect","hooks","visibleColumns","groupByBoundary","Header","_ref7","getToggleAllRowsSelectedProps","IndeterminateCheckbox","_ref8","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","_useTable$state","state","pageIndex","pageSize","sortBy","groupBy","expanded","filters","selectedRowIds","headerGroup","getHeaderGroupProps","headers","getHeaderProps","canGroupBy","getGroupByToggleProps","isGrouped","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","getRowProps","cells","cell","getCellProps","getToggleRowExpandedProps","isExpanded","subRows","isAggregated","isPlaceholder","className","disabled","defaultValue","Number","JSON","stringify","filterGreaterThan","roundedMedian","leafValues","round","autoRemove","forwardRef","_ref9","ref","indeterminate","rest","objectWithoutProperties","_excluded","defaultRef","useRef","resolvedRef","current","assign","App","accessor","aggregate","Aggregated","_ref10","_ref11","_ref12","_ref13","_ref14","_React$useState3","_len","lens","Array","_key","makeDataLevel","depth","d","objectSpread2","makeData","_React$useState4","setData","_React$useState5","originalData","skipResetRef","rowIndex","columnId","defineProperty","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.a47d1767.chunk.js","sourcesContent":["import namor from 'namor'\n\nconst range = len => {\n  const arr = []\n  for (let i = 0; i < len; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst newPerson = () => {\n  const statusChance = Math.random()\n  return {\n    firstName: namor.generate({ words: 1, numbers: 0 }),\n    lastName: namor.generate({ words: 1, numbers: 0 }),\n    age: Math.floor(Math.random() * 30),\n    visits: Math.floor(Math.random() * 100),\n    progress: Math.floor(Math.random() * 100),\n    status:\n      statusChance > 0.66\n        ? 'relationship'\n        : statusChance > 0.33\n        ? 'complicated'\n        : 'single',\n  }\n}\n\nexport default function makeData(...lens) {\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth]\n    return range(len).map(d => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\n      }\n    })\n  }\n\n  return makeDataLevel()\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n  useTable,\n  usePagination,\n  useSortBy,\n  useFilters,\n  useGroupBy,\n  useExpanded,\n  useRowSelect,\n} from 'react-table'\nimport matchSorter from 'match-sorter'\n\nimport makeData from './makeData'\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n\n    td {\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n  }\n\n  .pagination {\n    padding: 0.5rem;\n  }\n`\n\n// Create an editable cell renderer\nconst EditableCell = ({\n  value: initialValue,\n  row: { index },\n  column: { id },\n  updateMyData, // This is a custom function that we supplied to our table instance\n  editable,\n}) => {\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = React.useState(initialValue)\n\n  const onChange = e => {\n    setValue(e.target.value)\n  }\n\n  // We'll only update the external data when the input is blurred\n  const onBlur = () => {\n    updateMyData(index, id, value)\n  }\n\n  // If the initialValue is changed externall, sync it up with our state\n  React.useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  if (!editable) {\n    return `${initialValue}`\n  }\n\n  return <input value={value} onChange={onChange} onBlur={onBlur} />\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={e => {\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set()\n    preFilteredRows.forEach(row => {\n      options.add(row.values[id])\n    })\n    return [...options.values()]\n  }, [id, preFilteredRows])\n\n  // Render a multi-select box\n  return (\n    <select\n      value={filterValue}\n      onChange={e => {\n        setFilter(e.target.value || undefined)\n      }}\n    >\n      <option value=\"\">All</option>\n      {options.map((option, i) => (\n        <option key={i} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  )\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nfunction SliderColumnFilter({\n  column: { filterValue, setFilter, preFilteredRows, id },\n}) {\n  // Calculate the min and max\n  // using the preFilteredRows\n\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min)\n      max = Math.max(row.values[id], max)\n    })\n    return [min, max]\n  }, [id, preFilteredRows])\n\n  return (\n    <>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={filterValue || min}\n        onChange={e => {\n          setFilter(parseInt(e.target.value, 10))\n        }}\n      />\n      <button onClick={() => setFilter(undefined)}>Off</button>\n    </>\n  )\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({\n  column: { filterValue = [], preFilteredRows, setFilter, id },\n}) {\n  const [min, max] = React.useMemo(() => {\n    let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n    preFilteredRows.forEach(row => {\n      min = Math.min(row.values[id], min)\n      max = Math.max(row.values[id], max)\n    })\n    return [min, max]\n  }, [id, preFilteredRows])\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n      }}\n    >\n      <input\n        value={filterValue[0] || ''}\n        type=\"number\"\n        onChange={e => {\n          const val = e.target.value\n          setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\n        }}\n        placeholder={`Min (${min})`}\n        style={{\n          width: '70px',\n          marginRight: '0.5rem',\n        }}\n      />\n      to\n      <input\n        value={filterValue[1] || ''}\n        type=\"number\"\n        onChange={e => {\n          const val = e.target.value\n          setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\n        }}\n        placeholder={`Max (${max})`}\n        style={{\n          width: '70px',\n          marginLeft: '0.5rem',\n        }}\n      />\n    </div>\n  )\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = val => !val\n\n// Be sure to pass our updateMyData and the skipReset option\nfunction Table({ columns, data, updateMyData, skipReset }) {\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter(row => {\n          const rowValue = row.values[id]\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true\n        })\n      },\n    }),\n    []\n  )\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n      // And also our default editable cell\n      Cell: EditableCell,\n    }),\n    []\n  )\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page, // Instead of using 'rows', we'll use page,\n    // which has only the rows for the active page\n\n    // The rest of these things are super handy, too ;)\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize,\n      sortBy,\n      groupBy,\n      expanded,\n      filters,\n      selectedRowIds,\n    },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      filterTypes,\n      // updateMyData isn't part of the API, but\n      // anything we put into these options will\n      // automatically be available on the instance.\n      // That way we can call this function from our\n      // cell renderer!\n      updateMyData,\n      // We also need to pass this so the page doesn't change\n      // when we edit the data.\n      autoResetPage: !skipReset,\n      autoResetSelectedRows: !skipReset,\n      disableMultiSort: true,\n    },\n    useFilters,\n    useGroupBy,\n    useSortBy,\n    useExpanded,\n    usePagination,\n    useRowSelect,\n    // Here we will use a plugin to add our selection column\n    hooks => {\n      hooks.visibleColumns.push(columns => {\n        return [\n          {\n            id: 'selection',\n            // Make this column a groupByBoundary. This ensures that groupBy columns\n            // are placed after it\n            groupByBoundary: true,\n            // The header can use the table's getToggleAllRowsSelectedProps method\n            // to render a checkbox\n            Header: ({ getToggleAllRowsSelectedProps }) => (\n              <div>\n                <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n              </div>\n            ),\n            // The cell can use the individual row's getToggleRowSelectedProps method\n            // to the render a checkbox\n            Cell: ({ row }) => (\n              <div>\n                <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n              </div>\n            ),\n          },\n          ...columns,\n        ]\n      })\n    }\n  )\n\n  // Render the UI for your table\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>\n                  <div>\n                    {column.canGroupBy ? (\n                      // If the column can be grouped, let's add a toggle\n                      <span {...column.getGroupByToggleProps()}>\n                        {column.isGrouped ? '🛑 ' : '👊 '}\n                      </span>\n                    ) : null}\n                    <span {...column.getSortByToggleProps()}>\n                      {column.render('Header')}\n                      {/* Add a sort direction indicator */}\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? ' 🔽'\n                          : ' 🔼'\n                        : ''}\n                    </span>\n                  </div>\n                  {/* Render the columns filter UI */}\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map(row => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>\n                      {cell.isGrouped ? (\n                        // If it's a grouped cell, add an expander and row count\n                        <>\n                          <span {...row.getToggleRowExpandedProps()}>\n                            {row.isExpanded ? '👇' : '👉'}\n                          </span>{' '}\n                          {cell.render('Cell', { editable: false })} (\n                          {row.subRows.length})\n                        </>\n                      ) : cell.isAggregated ? (\n                        // If the cell is aggregated, use the Aggregated\n                        // renderer for cell\n                        cell.render('Aggregated')\n                      ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                        // Otherwise, just render the regular cell\n                        cell.render('Cell', { editable: true })\n                      )}\n                    </td>\n                  )\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      {/*\n        Pagination can be built however you'd like.\n        This is just a very basic UI implementation:\n      */}\n      <div className=\"pagination\">\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>{' '}\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          {'<'}\n        </button>{' '}\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          {'>'}\n        </button>{' '}\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>{' '}\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\n              gotoPage(page)\n            }}\n            style={{ width: '100px' }}\n          />\n        </span>{' '}\n        <select\n          value={pageSize}\n          onChange={e => {\n            setPageSize(Number(e.target.value))\n          }}\n        >\n          {[10, 20, 30, 40, 50].map(pageSize => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n      </div>\n      <pre>\n        <code>\n          {JSON.stringify(\n            {\n              pageIndex,\n              pageSize,\n              pageCount,\n              canNextPage,\n              canPreviousPage,\n              sortBy,\n              groupBy,\n              expanded: expanded,\n              filters,\n              selectedRowIds: selectedRowIds,\n            },\n            null,\n            2\n          )}\n        </code>\n      </pre>\n    </>\n  )\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return rowValue >= filterValue\n  })\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = val => typeof val !== 'number'\n\n// This is a custom aggregator that\n// takes in an array of leaf values and\n// returns the rounded median\nfunction roundedMedian(leafValues) {\n  let min = leafValues[0] || 0\n  let max = leafValues[0] || 0\n\n  leafValues.forEach(value => {\n    min = Math.min(min, value)\n    max = Math.max(max, value)\n  })\n\n  return Math.round((min + max) / 2)\n}\n\nconst IndeterminateCheckbox = React.forwardRef(\n  ({ indeterminate, ...rest }, ref) => {\n    const defaultRef = React.useRef()\n    const resolvedRef = ref || defaultRef\n\n    React.useEffect(() => {\n      resolvedRef.current.indeterminate = indeterminate\n    }, [resolvedRef, indeterminate])\n\n    return (\n      <>\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} />\n      </>\n    )\n  }\n)\n\nfunction App() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        columns: [\n          {\n            Header: 'First Name',\n            accessor: 'firstName',\n            // Use a two-stage aggregator here to first\n            // count the total rows being aggregated,\n            // then sum any of those counts if they are\n            // aggregated further\n            aggregate: 'count',\n            Aggregated: ({ value }) => `${value} Names`,\n          },\n          {\n            Header: 'Last Name',\n            accessor: 'lastName',\n            // Use our custom `fuzzyText` filter on this column\n            filter: 'fuzzyText',\n            // Use another two-stage aggregator here to\n            // first count the UNIQUE values from the rows\n            // being aggregated, then sum those counts if\n            // they are aggregated further\n            aggregate: 'uniqueCount',\n            Aggregated: ({ value }) => `${value} Unique Names`,\n          },\n        ],\n      },\n      {\n        Header: 'Info',\n        columns: [\n          {\n            Header: 'Age',\n            accessor: 'age',\n            Filter: SliderColumnFilter,\n            filter: 'equals',\n            // Aggregate the average age of visitors\n            aggregate: 'average',\n            Aggregated: ({ value }) => `${value} (avg)`,\n          },\n          {\n            Header: 'Visits',\n            accessor: 'visits',\n            Filter: NumberRangeColumnFilter,\n            filter: 'between',\n            // Aggregate the sum of all visits\n            aggregate: 'sum',\n            Aggregated: ({ value }) => `${value} (total)`,\n          },\n          {\n            Header: 'Status',\n            accessor: 'status',\n            Filter: SelectColumnFilter,\n            filter: 'includes',\n          },\n          {\n            Header: 'Profile Progress',\n            accessor: 'progress',\n            Filter: SliderColumnFilter,\n            filter: filterGreaterThan,\n            // Use our custom roundedMedian aggregator\n            aggregate: roundedMedian,\n            Aggregated: ({ value }) => `${value} (med)`,\n          },\n        ],\n      },\n    ],\n    []\n  )\n\n  const [data, setData] = React.useState(() => makeData(10000))\n  const [originalData] = React.useState(data)\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  const skipResetRef = React.useRef(false)\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateMyData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    skipResetRef.current = true\n    setData(old =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...row,\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  // After data changes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  React.useEffect(() => {\n    skipResetRef.current = false\n  }, [data])\n\n  // Let's add a data resetter/randomizer to help\n  // illustrate that flow...\n  const resetData = () => {\n    // Don't reset the page when we do this\n    skipResetRef.current = true\n    setData(originalData)\n  }\n\n  return (\n    <Styles>\n      <button onClick={resetData}>Reset Data</button>\n      <Table\n        columns={columns}\n        data={data}\n        updateMyData={updateMyData}\n        skipReset={skipResetRef.current}\n      />\n    </Styles>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}