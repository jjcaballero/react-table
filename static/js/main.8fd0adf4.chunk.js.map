{"version":3,"sources":["makeData.js","App.js","index.js"],"names":["range","len","arr","i","push","newPerson","firstName","namor","generate","words","numbers","score0","Math","floor","random","score1","score2","score3","score4","score5","score6","Styles","styled","div","withConfig","displayName","componentId","defaultPropGetter","Table","_ref","columns","data","_ref$getHeaderProps","getHeaderProps","_ref$getColumnProps","getColumnProps","_ref$getRowProps","getRowProps","_ref$getCellProps","getCellProps","_useTable","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","react_default","a","createElement","map","headerGroup","getHeaderGroupProps","headers","column","className","style","render","row","cells","cell","App","React","useMemo","Header","accessor","fontWeight","_len","arguments","length","lens","Array","_key","makeDataLevel","depth","undefined","d","Object","objectSpread2","subRows","makeData","onClick","alert","background","index","cellInfo","backgroundColor","concat","value","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.8fd0adf4.chunk.js","sourcesContent":["import namor from 'namor'\n\nconst range = len => {\n  const arr = []\n  for (let i = 0; i < len; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst newPerson = () => {\n  return {\n    firstName: namor.generate({ words: 1, numbers: 0 }),\n    score0: Math.floor(Math.random() * 100),\n    score1: Math.floor(Math.random() * 100),\n    score2: Math.floor(Math.random() * 100),\n    score3: Math.floor(Math.random() * 100),\n    score4: Math.floor(Math.random() * 100),\n    score5: Math.floor(Math.random() * 100),\n    score6: Math.floor(Math.random() * 100),\n  }\n}\n\nexport default function makeData(...lens) {\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth]\n    return range(len).map(d => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\n      }\n    })\n  }\n\n  return makeDataLevel()\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTable } from 'react-table'\n\nimport makeData from './makeData'\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  .user {\n    background-color: blue;\n    color: white;\n  }\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\n// Create a default prop getter\nconst defaultPropGetter = () => ({})\n\n// Expose some prop getters for headers, rows and cells, or more if you want!\nfunction Table({\n  columns,\n  data,\n  getHeaderProps = defaultPropGetter,\n  getColumnProps = defaultPropGetter,\n  getRowProps = defaultPropGetter,\n  getCellProps = defaultPropGetter,\n}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data,\n  })\n\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th\n                // Return an array of prop objects and react-table will merge them appropriately\n                {...column.getHeaderProps([\n                  {\n                    className: column.className,\n                    style: column.style,\n                  },\n                  getColumnProps(column),\n                  getHeaderProps(column),\n                ])}\n              >\n                {column.render('Header')}\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row)\n          return (\n            // Merge user row props in\n            <tr {...row.getRowProps(getRowProps(row))}>\n              {row.cells.map(cell => {\n                return (\n                  <td\n                    // Return an array of prop objects and react-table will merge them appropriately\n                    {...cell.getCellProps([\n                      {\n                        className: cell.column.className,\n                        style: cell.column.style,\n                      },\n                      getColumnProps(cell.column),\n                      getCellProps(cell),\n                    ])}\n                  >\n                    {cell.render('Cell')}\n                  </td>\n                )\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\nfunction App() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        columns: [\n          {\n            Header: 'First Name',\n            accessor: 'firstName',\n            className: 'user',\n            style: {\n              fontWeight: 'bolder',\n            },\n          },\n        ],\n      },\n      {\n        Header: 'Scores',\n        columns: [\n          {\n            Header: 'Day 1',\n            accessor: 'score0',\n          },\n          {\n            Header: 'Day 2',\n            accessor: 'score1',\n          },\n          {\n            Header: 'Day 3',\n            accessor: 'score2',\n          },\n          {\n            Header: 'Day 4',\n            accessor: 'score3',\n          },\n          {\n            Header: 'Day 5',\n            accessor: 'score4',\n          },\n          {\n            Header: 'Day 6',\n            accessor: 'score5',\n          },\n          {\n            Header: 'Day 7',\n            accessor: 'score6',\n          },\n        ],\n      },\n    ],\n    []\n  )\n\n  const data = React.useMemo(() => makeData(20), [])\n\n  return (\n    <Styles>\n      <Table\n        columns={columns}\n        data={data}\n        getHeaderProps={column => ({\n          onClick: () => alert('Header!'),\n        })}\n        getColumnProps={column => ({\n          onClick: () => alert('Column!'),\n        })}\n        getRowProps={row => ({\n          style: {\n            background: row.index % 2 === 0 ? 'rgba(0,0,0,.1)' : 'white',\n          },\n        })}\n        getCellProps={cellInfo => ({\n          style: {\n            backgroundColor: `hsl(${120 * ((120 - cellInfo.value) / 120) * -1 +\n              120}, 100%, 67%)`,\n          },\n        })}\n      />\n    </Styles>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}